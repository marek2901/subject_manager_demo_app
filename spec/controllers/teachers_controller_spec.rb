require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe TeachersController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Teacher. As you add validations to Teacher, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {first_name: "first", last_name: "last", title: "Prof."}
  }

  let(:invalid_attributes) {
    {first_name: "first", last_name: "last", title: "wrong title"}
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # TeachersController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  context 'signed_in' do
    before(:each) do
      @request.env["devise.mapping"] = Devise.mappings[:user]
      sign_in(create(:user), scope: :user)
    end

    describe "GET #index" do
      it "assigns all teachers as @teachers" do
        teacher = Teacher.create! valid_attributes
        get :index, {}, session: valid_session
        expect(assigns(:teachers)).to eq([teacher])
      end
    end

    describe "GET #show" do
      it "assigns the requested teacher as @teacher" do
        teacher = Teacher.create! valid_attributes
        get :show, {id: teacher.to_param}, session: valid_session
        expect(assigns(:teacher)).to eq(teacher)
      end
    end

    describe "GET #new" do
      it "assigns a new teacher as @teacher" do
        get :new, {}, session: valid_session
        expect(assigns(:teacher)).to be_a_new(Teacher)
      end
    end

    describe "GET #edit" do
      it "assigns the requested teacher as @teacher" do
        teacher = Teacher.create! valid_attributes
        get :edit, {id: teacher.to_param}, session: valid_session
        expect(assigns(:teacher)).to eq(teacher)
      end
    end

    describe "POST #create" do
      context "with valid params" do
        it "creates a new Teacher" do
          expect {
            post :create, {teacher: valid_attributes}, session: valid_session
          }.to change(Teacher, :count).by(1)
        end

        it "assigns a newly created teacher as @teacher" do
          post :create, {teacher: valid_attributes}, session: valid_session
          expect(assigns(:teacher)).to be_a(Teacher)
          expect(assigns(:teacher)).to be_persisted
        end

        it "redirects to the created teacher" do
          post :create, {teacher: valid_attributes}, session: valid_session
          expect(response).to redirect_to(Teacher.last)
        end
      end

      context "with invalid params" do
        it "assigns a newly created but unsaved teacher as @teacher" do
          post :create, {teacher: invalid_attributes}, session: valid_session
          expect(assigns(:teacher)).to be_a_new(Teacher)
        end

        it "re-renders the 'new' template" do
          post :create, {teacher: invalid_attributes}, session: valid_session
          expect(response).to render_template("new")
        end
      end
    end

    describe "PUT #update" do
      context "with valid params" do
        let(:new_attributes) {
          {first_name: "Other"}
        }

        it "updates the requested teacher" do
          teacher = Teacher.create! valid_attributes
          put :update, {id: teacher.to_param, teacher: new_attributes}, session: valid_session
          teacher.reload
          expect(teacher.first_name).to eq "Other"
        end

        it "assigns the requested teacher as @teacher" do
          teacher = Teacher.create! valid_attributes
          put :update, {id: teacher.to_param, teacher: valid_attributes}, session: valid_session
          expect(assigns(:teacher)).to eq(teacher)
        end

        it "redirects to the teacher" do
          teacher = Teacher.create! valid_attributes
          put :update, {id: teacher.to_param, teacher: valid_attributes}, session: valid_session
          expect(response).to redirect_to(teacher)
        end
      end

      context "with invalid params" do
        it "assigns the teacher as @teacher" do
          teacher = Teacher.create! valid_attributes
          put :update, {id: teacher.to_param, teacher: invalid_attributes}, session: valid_session
          expect(assigns(:teacher)).to eq(teacher)
        end

        it "re-renders the 'edit' template" do
          teacher = Teacher.create! valid_attributes
          put :update, {id: teacher.to_param, teacher: invalid_attributes}, session: valid_session
          expect(response).to render_template("edit")
        end
      end
    end

    describe "DELETE #destroy" do
      it "destroys the requested teacher" do
        teacher = Teacher.create! valid_attributes
        expect {
          delete :destroy, {id: teacher.to_param}, session: valid_session
        }.to change(Teacher, :count).by(-1)
      end

      it "redirects to the teachers list" do
        teacher = Teacher.create! valid_attributes
        delete :destroy, {id: teacher.to_param}, session: valid_session
        expect(response).to redirect_to(teachers_url)
      end
    end
    
  end

end
